version: 0.2

env:
  variables:
    AWS_ACCOUNT_ID:
    AWS_REGION:
    CLUSTER_NAME:
    IMAGE_NAME:
    IMAGE_NAMESPACE:
    IMAGE_TAG:
    SERVICE_NAME:

phases:
  install:
    commands:
      # Short commit hash
      - GIT_COMMIT_HASH=$(git rev-parse --short=7 --verify HEAD)

      - PACKAGE_VERSION=$(awk -F\" '/"version":/ {print $4}' package.json)

      - APP_VERSION=$PACKAGE_VERSION-$GIT_COMMIT_HASH

      # Container repository location.
      - REPO_URL=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_NAMESPACE/$IMAGE_NAME

      # Use the IMAGE_TAG passed in from the build, fallback to 'latest' if blank.
      - TAG=${IMAGE_TAG:-latest}
  pre_build:
    commands:
      # Log in to ECR
      - $(aws ecr get-login --no-include-email --region $AWS_REGION)

      # Pull each image layer for the build to cache from.
      - docker pull $REPO_URL:install-stage || true
      - docker pull $REPO_URL:build-stage || true
      - docker pull $REPO_URL:$TAG || true
  build:
    commands:
      - docker build --cache-from $REPO_URL:install-stage --target install-stage -t $IMAGE_NAME:install-stage .
      - docker tag $IMAGE_NAME:install-stage $REPO_URL:install-stage

      - docker build --cache-from $REPO_URL:install-stage --cache-from $REPO_URL:build-stage --target build-stage -t $IMAGE_NAME:build-stage .
      - docker tag $IMAGE_NAME:build-stage $REPO_URL:build-stage

      - docker build --build-arg app_version=$APP_VERSION --cache-from $REPO_URL:install-stage --cache-from $REPO_URL:build-stage --cache-from $REPO_URL:$TAG -t $IMAGE_NAME:$GIT_COMMIT_HASH -t $IMAGE_NAME:$TAG .
      - docker tag $IMAGE_NAME:$TAG $REPO_URL:$TAG
      - docker tag $IMAGE_NAME:$TAG $REPO_URL:$GIT_COMMIT_HASH
  post_build:
    commands:
      - docker push $REPO_URL:install-stage
      - docker push $REPO_URL:build-stage
      - docker push $REPO_URL:$TAG
      - docker push $REPO_URL:$GIT_COMMIT_HASH

      # Update the service.
      # Discard the default output (json full description of the service.)
      - aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment 1>/dev/null

      - echo Build completed.
      - echo Service $SERVICE_NAME in cluster $CLUSTER_NAME is now updating...
